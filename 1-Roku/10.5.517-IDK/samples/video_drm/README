Copyright 2021 Roku, Inc.  All rights reserved.

This sample channel demonstrates:

+ Cross-compile Bento4 static library to parse and extract parameters necessary
  for decrypting and decoding content protected by Widevine DRM in hardware.
  This sample channel is otherwise identical to the video sample that plays
  clear content and use the same decoder interface.

+ Using cURL to download Widevine license.

The lessons to take away in no particular order:

+ In order to enable Widevine support, your must declare the following in your
  manist:

    requires_widevine_drm=1
    requires_widevine_version=1.0

  Failing to do so will result in ROKU_DRM_ERR_INTERNAL.

+ DRM support on Roku is easy; building on top of the video sample, you will
  add code to manage DRM session, license, and write samples with information
  about what is encrypted.  You can compare the folders video and video_drm to
  see the differences.  Changes made to support Widevine also has comment:

    // DRM addition

  near the code changes to help you follow along.

+ This sample uses unmodified open source utilities from Bento4 to package
  bitstreams for testing; please visit the following URL to learn more about it:

    http://www.bento4.com/about/

  You can build the utilities from source:

    https://github.com/axiomatic-systems/Bento4.git

+ This sample channel uses PSSH from:

    https://google.github.io/shaka-packager/html/tutorials/raw_key.html

  which results in the following key IDs and content keys
    InstallKey: key_id      = abba271e8bcf552bbd2e86a434a9a5d9
    InstallKey: content_key = 69eaa802a6763af979e8d1940fb88392
    InstallKey: key_control =
    InstallKey: key_id      = f3c5e0361e6654b28f8049c778b23946
    InstallKey: content_key = a4631a153a443df9eed0593043db7519
    InstallKey: key_control =
    InstallKey: key_id      = 6d76f25cb17f5e16b8eaef6bbf582d8e
    InstallKey: content_key = cb541084c99731aef4fff74500c12ead
    InstallKey: key_control =
    InstallKey: key_id      = 647863379f4154108377e74c6ec0e3b8
    InstallKey: content_key = f5fbcc82f4b94ce4e4d810135003e225
    InstallKey: key_control =

  Sintel (https://durian.blender.org/) trailer was packaged using the following
  steps:

  1) Fragment the MP4 file

  `mp4fragment ./sintel_trailer-720p.mp4 ./fragmented_sintel.mp4`

  2) Extract Audio

  `mp4split --audio ./fragmented_sintel.mp4`
  `cat init.mp4 segment-2.0001.m4s segment-2.0002.m4s > audio.mp4`

  3) Extract Video

  `mp4split --video ./fragmented_sintel.mp4`
  `cat init.mp4 segment-1.0001.m4s segment-1.0002.m4s > video.mp4`

  4) Encrypt Video

  `mp4encrypt --method MPEG-CENC
              --property 1:KID:abba271e8bcf552bbd2e86a434a9a5d9
              --key 1:69eaa802a6763af979e8d1940fb88392:random
              ./video.mp4 ./video_encrypted.mp4`

  5) Encrypt Audio

  `mp4encrypt --method MPEG-CENC
              --property 2:KID:f3c5e0361e6654b28f8049c778b23946
              --key 2:a4631a153a443df9eed0593043db7519:random
              ./audio.mp4 ./audio_encrypted.mp4`

+ When linking, some libraries are not found but you'll still get the executable
  because of linker flag -Wl,--allow-shlib-undefined.  Although these libraries
  are not packaged with IDK, they will show up in IDK sandbox at runtime.  This
  is not the same as forgetting to link against a required library; in that
  case you'll get a linker error saying symbol is undefined.

+ This sample uses libcurl to fetch license, and the certificate bundle is not
  built into the library.  It is mounted into the sandbox at:

    /common/certs/ca-bundle.crt

  This is required for peer verification, and you generally want to know that
  you are talking to the right server before uploading data.

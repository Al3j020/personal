Introduction
============

The Custom Development Kit (IDK) is designed to allow anyone with a 
supported Roku device to tinker and run C/C++ applications.

There is an existing SDK for Roku devices based on the BrightScript
programming language that is widely in use.  The IDK works in conjunction
with the SDK.

Audience
========

Roku will not provide support to hobbyists working with IDK, and unlike
channels developed with SDK, IDK applications are not eligible for publishing
via Channel Store.

Roku is targeting IDK to anyone with an interest to learn more about C/C++
and embedded programming.  IDK includes everything you need to draw using
OpenGL ES2, decode videos, and work with Roku remote.  You'll have access
to GCC and local storage, the possibilities are infinite.

IDK Overview
============

The IDK is delivered as an archive.  The root directories are:

  + docs: Support documentation.

  + platforms: Contains header files, libraries, and the toolchain to build
    your software.  Only recent Roku devices are supported.

  + samples: Simple applications to get you started.

The BrightScript SDK documentation is available here: http://sdkdocs.roku.com/

Getting Started
===============

IDK only works with Linux workstations for development.  We have successfully
built with Ubuntu and Fedora.

0) Extract files from archive.  Good job, you already did it!

1) Connect your Roku device to the same network as your workstation, this is
   so that you can transfer your application later.  Connect Roku device to a
   TV using HDMI cable; this does not apply to Roku TVs.

2) Power up your Roku device and if it has not already been set up, go through
   the on-boarding procedure to set up your device.

3) Once your Roku device boots to Home Screen, with rows of channels, you need
   to issue a special key sequence to enable the dev installer:

     HOME (3 times), UP (2 times), RIGHT, LEFT, RIGHT, LEFT, RIGHT

   This will bring up "Developer Settings" screen, with important information
   about connecting to Roku device for development.  You will also be able to
   set a pass phrase so that you will only interact with device with the
   matching pass phrase.  If you forget the pass phrase, user name or URL, you
   can use the same secret key sequence to retrieve information or reset the
   pass phrase.

   If you do not see this screen, repeat the secret key combination again.
   Device must be rebooted for the settings to take effect.

4) Each directory under samples will show you how to accomplish a specific
   task with your Roku device.  For example, to render graphics, type:

     `cd samples/gles2`
     `make`

   To build the sample channel.  At the same level as the Makefile, you'll
   find a binary package to side-load via web browser.  Type in the URL from
   "Developer Settings" screen, which is just IP address of your Roku device.
   You will be prompted for user name and password.  Once you enter those,
   you will be presented with the "Development Application Installer" page.
   Click "Upload" button to select the binary package, then "Install" to upload
   it to your Roku device.  Splash screen should display, your application is
   running!

   Feel free to experiment by making a copy of the directory and change the
   code to see what happens.  Try each sample to familiarize yourself with the
   kind of application you can easily develop with IDK.

Packages
========

A package that you side-loaded is a compressed archive with a specific set of
files and directory layout.  Each IDK sample has a "package" subdirectory
which is used to generate the compressed archive.  At root of "package", the
special files and directories are:

  + manifest: A text file that contains attributes describing the channel,
    such as its icon and name.

  + source: This is a directory that contains BrightScript source.  All
    packages require some BrightScript with a function acting as the entry
    point.

  + app: This is the executable we built with IDK, that we want to execute.
    You can customize which binary to execute via manifest entry idk_app_path.

  + lib: This is the default library directory in which we will search for
    any required shared libraries.  You can customize search path with
    manifest entry idk_lib_path

  + gdbserver: You'll find this binary as part of your toolchain, under
    /usr/bin.  You can use this executable to debug your application remotely.

Known Issues
============

  + Cores are not available.  The application will simply exit.

  + Individual files with a package cannot be larger than 4GB.
